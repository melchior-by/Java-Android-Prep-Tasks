package org.example.collections;

import java.util.ArrayList;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Random;
import java.util.Set;
import java.util.concurrent.ThreadLocalRandom;
import java.util.stream.Collectors;

/**
 * 1. –ù–∞–ø–∏—à–∏—Ç–µ –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø–æ–ª–Ω—è–µ—Ç —Ä–∞–Ω–¥–æ–º–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ (1_000_000 —Ä–∞–∑) –∫–æ–ª–ª–µ–∫—Ü–∏–∏ ArrayList –∏ LinkedList.
 * –ù–∞–ø–∏—à–∏—Ç–µ –µ—â–µ –æ–¥–∏–Ω –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–±–∏—Ä–∞–µ—Ç –∏–∑ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç –Ω–∞—É–≥–∞–¥ 100_000 —Ä–∞–∑.
 * –ó–∞–º–µ—Ä—å—Ç–µ –≤—Ä–µ–º—è, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ –Ω–∞ —ç—Ç–æ. –°—Ä–∞–≤–Ω–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ —Å–¥–µ–ª–∞–π—Ç–µ –≤—ã–≤–æ–¥—ã üôÇ
 * (–í—Ä–µ–º—è –ø–æ–º–æ–∂–µ—Ç –∑–∞–º–µ—Ä–∏—Ç—å System.nanoseconds() –º–µ—Ç–æ–¥)
 * <br><br>
 * 2. –ù–∞–ø–∏—à–∏—Ç–µ –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞ –≤—Ö–æ–¥ –ø–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–ª–µ–∫—Ü–∏—é –æ–±—ä–µ–∫—Ç–æ–≤, –∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–ª–µ–∫—Ü–∏—é —É–∂–µ –±–µ–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤.
 */
public class CollectionsTask {
    private static final int N1 = 1_000_000;
    private static final int N2 = 100_000;
    private static List<Integer> generateRandomArrayList(int n) {
        List<Integer> list = new ArrayList<>(n);
        generateRandom(list, n);
        return list;
    }

    private static List<Integer> generateRandomLinkedList(int n) {
        List<Integer> list = new LinkedList<>();
        generateRandom(list, n);
        return list;
    }

    private static void generateRandom(List<Integer> list, int n) {
        Random rand = new Random();
        rand.setSeed(System.currentTimeMillis());
        for (int i = 0; i < n; i++) {
            Integer r = rand.nextInt() % 256;
            list.add(r);
        }
    }

    private static void getRandom(List<Integer> list, int n) {
        int rand;
        for (int i = 0; i < n; i++) {
            rand = ThreadLocalRandom.current().nextInt(0, n);
            list.get(rand);
        }
    }

    private static Set<Integer> deleteDuplicatesByUsingSet(List<Integer> list) {
        return new LinkedHashSet<>(list);
    }

    private static List<Integer> deleteDuplicatesByStreamAPI(List<Integer> list) {
        return list.stream().distinct().collect(Collectors.toList());
    }

    public static void main(String[] args) {
        long startTime = System.nanoTime();
        List<Integer> arrayList = generateRandomArrayList(N1);
        long duration = System.nanoTime() - startTime;
        System.out.println("ArrayList generate: " + duration);

        startTime = System.nanoTime();
        List<Integer> linkedList = generateRandomLinkedList(N1);
        duration = System.nanoTime() - startTime;
        System.out.println("LinkedList generate: " + duration);

        startTime = System.nanoTime();
        getRandom(arrayList, N2);
        duration = System.nanoTime() - startTime;
        System.out.println("ArrayList get: " + duration);

        startTime = System.nanoTime();
        getRandom(linkedList, N2);
        duration = System.nanoTime() - startTime;
        System.out.println("LinkedList get: " + duration);

    }
}
